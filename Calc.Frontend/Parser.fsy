%{
//note, the module name of the parser is given by the --module flag (set in project)
open Swensen.Calc.Ast

%}

%token <int> INT32
%token <float> DOUBLE
%token PLUS MINUS TIMES DIV POW FACT
%token LPAREN RPAREN
%token EOF

%left PLUS MINUS
%left TIMES DIV
%right POW
%nonassoc UMINUS
%nonassoc FACT

%start start
%type <typedExp> start
%type <UT.exp> exp

%%

start:
    | exp EOF				 { $1 |> tycheck }

exp: 
    | exp PLUS  exp			 { UT.Binop(Plus, $1, $3)  }
    | exp MINUS exp			 { UT.Binop(Minus, $1, $3) }
	| exp TIMES exp			 { UT.Binop(Times, $1, $3) }
	| exp DIV exp			 { UT.Binop(Div, $1, $3) }
	| exp POW exp			 { UT.Binop(Pow, $1, $3) }
	| exp FACT				 { UT.Fact($1) }
	| MINUS exp %prec UMINUS { UT.UMinus($2) }
	| INT32					 { UT.Int32($1) }
	| DOUBLE				 { UT.Double($1) }
	| LPAREN exp RPAREN		 { $2 }