%{

open Microsoft.FSharp.Text.Parsing
open Swensen.NL
open Swensen.NL.Ast
module EM = ErrorMessage
//let parse_error msg =
//    failwithf "%A" msg

let range (parseState:IParseState) rangeStart rangeEnd =
    let posStart,_ = parseState.InputRange rangeStart
    let _,posEnd   = parseState.InputRange rangeEnd
    PositionRange(posStart,posEnd)

%}

%token <int> INT32
%token <float> DOUBLE
%token <string> STRING
%token <char> CHAR
%token <bool> BOOL
%token NULL TYPE DEFAULT
%token ANDAND OROR //XOR
%token EQEQ NOTEQ LT GT GTEQ LTEQ
%token PLUS MINUS TIMES DIV POW BANG NOT
%token <string> IDENT
%token IN EQ
%token LPAREN RPAREN
%token COMMA DOT SEMICOLON
%token OPEN
%token LBRACKET RBRACKET LBRACE RBRACE
%token IF THEN ELSE
%token SET
%token WHILE BREAK CONTINUE
%token EOF

%right SEMICOLON
%nonassoc SET

%left OROR //XOR
%left ANDAND

%left EQEQ NOTEQ LT GT GTEQ LTEQ

%left PLUS MINUS
%left TIMES DIV
%right POW

%nonassoc UMINUS
%nonassoc BANG
//%nonassoc NOT

%start start
%type <SynTopLevel> start

%type <SynExpr> expr
%type <SynExpr list> exprList

%type <SynStmt> stmt
%type <SynStmt list> stmtList

%type <TySig> tySig
%type <TySig list> tySigList

%%

start:
    | topLevel EOF { $1 }


path:
    | IDENT { $1 }
    | IDENT DOT path { $1 + "." + $3 }

tySigList:
    | tySig { [$1] }
    | tySig COMMA tySigList { $1::$3 }

tySig:
    | path LBRACKET tySigList RBRACKET { TySig($1, $3, range parseState 1 4) }
    | path { TySig($1, [], range parseState 1 1) } 

exprList:
    | expr { [$1] }
    | expr COMMA exprList { $1::$3 }
    | { [] }
    
expr: 
    //-- logical binary operators --

//    | expr XOR expr                             
//        { SynExpr.LogicBinop(SynLogicBinop.Xor, ($1, range parseState 1 1), ($3, range parseState 3 3)) }
    | expr OROR expr                             
        { SynExpr.LogicBinop(SynLogicBinop.Or, ($1, range parseState 1 1), ($3, range parseState 3 3)) }
    | expr ANDAND expr                             
        { SynExpr.LogicBinop(SynLogicBinop.And, ($1, range parseState 1 1), ($3, range parseState 3 3)) }

    //-- comparison operators --

    | expr EQEQ expr                             
        { SynExpr.ComparisonBinop(SynComparisonBinop.Eq, $1, $3, range parseState 1 3) }
    | expr NOTEQ expr                             
        { SynExpr.ComparisonBinop(SynComparisonBinop.Neq, $1, $3, range parseState 1 3) }
    | expr LT expr                             
        { SynExpr.ComparisonBinop(SynComparisonBinop.Lt, $1, $3, range parseState 1 3) }
    | expr GT expr                                 
        { SynExpr.ComparisonBinop(SynComparisonBinop.Gt, $1, $3, range parseState 1 3) }
    | expr LTEQ expr                                 
        { SynExpr.ComparisonBinop(SynComparisonBinop.LtEq, $1, $3, range parseState 1 3) }
    | expr GTEQ expr                                 
        { SynExpr.ComparisonBinop(SynComparisonBinop.GtEq, $1, $3, range parseState 1 3) }

    //-- numeric binary operators --

    | expr PLUS expr                             
        { SynExpr.NumericBinop(SynNumericBinop.Plus, $1, $3, range parseState 1 3) }
    | expr MINUS expr                             
        { SynExpr.NumericBinop(SynNumericBinop.Minus, $1, $3, range parseState 1 3) }
    | expr TIMES expr                             
        { SynExpr.NumericBinop(SynNumericBinop.Times, $1, $3, range parseState 1 3) }
    | expr DIV expr                                 
        { SynExpr.NumericBinop(SynNumericBinop.Div, $1, $3, range parseState 1 3) }
    | expr POW expr                                 
        { SynExpr.Pow($1, $3, range parseState 1 3) }
            
    //-- postfix operators --
    
//    | expr BANG                                     
//        { SynExpr.Fact($1, range parseState 1 2) }
    
    //-- prefix operators --
    
    | MINUS expr %prec UMINUS                    
        { SynExpr.UMinus($2, range parseState 1 2) }
    | BANG expr                                    
        { SynExpr.LogicalNot($2, range parseState 2 2) }

    //-- literal values --

    | INT32                                      
        { SynExpr.Int32($1) }
    | DOUBLE                                 
        { SynExpr.Double($1) }
    | STRING                                 
        { SynExpr.String($1) }
    | CHAR                                   
        { SynExpr.Char($1) }
    | BOOL                                  
        { SynExpr.Bool($1) }
    | NULL LBRACKET tySig RBRACKET              
        { SynExpr.Null($3) }
    | TYPE LBRACKET tySig RBRACKET            
        { SynExpr.Typeof($3) }
    | DEFAULT LBRACKET tySig RBRACKET            
        { SynExpr.Default($3) }
    | LPAREN RPAREN
        { SynExpr.Nop }
    
    //enclosed expression
    | LPAREN expr RPAREN                      
        { $2 }
    
    //bind variable
    | path EQ expr IN expr                
       { SynExpr.Let($1, ($3, range parseState 3 3), $5) }
    //var expression
    | path                                     
        { SynExpr.Var(Path($1), range parseState 1 1)}
    //set var expression
    | path SET expr
        { SynExpr.VarSet((Path($1), range parseState 1 1), $3, range parseState 1 3)}

    //cast on var
    | path LBRACKET tySigList RBRACKET
        { 
            if $3.Length <> 1 then //a bit of a hack here; we need to use tySigList instead of just tySig to disambiguate grammer
                parseState.RaiseError()

            SynExpr.Cast(SynExpr.Var(Path($1), range parseState 1 1), $3.Head, range parseState 1 4) 
        }

    //cast on expression
    | expr LBRACKET tySig RBRACKET                
        { SynExpr.Cast($1, $3, range parseState 1 4) }

    //non-generic constructor or static call or instance call on var
    | path LPAREN exprList RPAREN                                            
        { SynExpr.NameCall(Path($1), [], $3, range parseState 1 4) }
    //generic constructor or static call or instance call on var
    | path LBRACKET tySigList RBRACKET LPAREN exprList RPAREN            
        { SynExpr.NameCall(Path($1), $3, $6, range parseState 1 7) }
    //generic type non-generic static call
    | path LBRACKET tySigList RBRACKET DOT IDENT LPAREN exprList RPAREN
        { SynExpr.GenericTypeStaticCall($1, $3, $6, [], $8, range parseState 1 9) }
    //generic type generic static call
    | path LBRACKET tySigList RBRACKET DOT IDENT LBRACKET tySigList RBRACKET LPAREN exprList RPAREN    
        { SynExpr.GenericTypeStaticCall($1, $3, $6, $8, $11, range parseState 1 12) }
    
    //non-generic method call on expression
    | expr DOT IDENT LPAREN exprList RPAREN        
        { SynExpr.ExpCall($1,$3,[],$5, range parseState 1 6) }
    //generic method call on expression
    | expr DOT IDENT LBRACKET tySigList RBRACKET LPAREN exprList RPAREN        
        { SynExpr.ExpCall($1,$3,$5,$8, range parseState 1 9) }
    
    //sequential expression 
    | expr SEMICOLON expr                     
        { SynExpr.Sequential($1,($3, range parseState 3 3)) }
    
    //open namespace
    | OPEN tySig IN expr                    
        { SynExpr.OpenNamespaceOrType($2, $4) }
    
    //open assembly reference (by assembly name or file name)
    | OPEN STRING IN expr                     
        { SynExpr.OpenAssembly(($2, range parseState 2 2), $4) }

    //if then else expressions
    | IF expr LBRACE expr RBRACE
        { SynExpr.IfThenElse(($2, range parseState 2 2),$4,None, range parseState 1 5) }
    | IF expr LBRACE expr RBRACE ELSE LBRACE expr RBRACE
        { SynExpr.IfThenElse(($2, range parseState 2 2), $4, Some($8), range parseState 1 9) }

    //-- loops --
    | WHILE expr LBRACE expr RBRACE
        { SynExpr.WhileLoop(($2, range parseState 2 2),$4) }
    | BREAK LPAREN RPAREN
        { SynExpr.Break(range parseState 1 1) }
    | CONTINUE LPAREN RPAREN
        { SynExpr.Continue(range parseState 1 1) }

stmtList:
    | stmt { [$1] }
    | stmt stmtList { $1::$2 }

stmt:
    //open namespace
    | OPEN tySig SEMICOLON SEMICOLON
        { SynStmt.OpenNamespaceOrType($2) }
    
    //open assembly reference (by assembly name or file name)
    | OPEN STRING SEMICOLON SEMICOLON
        { SynStmt.OpenAssembly($2, range parseState 2 2) }
        
    //let statement (these can not be paths, since they are compiled as fields -- unless we want to compile them with '$' seperators)
    | path EQ expr SEMICOLON SEMICOLON
        { 
            if ($1).Contains(".") then
                EM.Invalid_pathifier (range parseState 1 1) ($1) "."

            SynStmt.Let($1, ($3, range parseState 3 3))
        }

    | expr SEMICOLON SEMICOLON
        { SynStmt.Do($1) }

topLevel:
    | stmtList
        { SynTopLevel.StmtList($1) }
    | expr
        { SynTopLevel.Expr($1) }