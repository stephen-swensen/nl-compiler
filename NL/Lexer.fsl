{
module Swensen.NL.Lexer
open System
open Parser
open FSharp.Text.Lexing

module CM = CompilerMessages

let lexeme lexbuf =
    LexBuffer<char>.LexemeString lexbuf

let range (lexbuf:LexBuffer<char>) =
    PositionRange(lexbuf.StartPos,lexbuf.EndPos)

let keywords =
    [
        "open", OPEN
        "in", IN
        "if", IF
        "else", ELSE
        "null", NULL
        "type", TYPE
        "true", BOOL(true)
        "false", BOOL(false)
        "while", WHILE
        "break", BREAK
        "continue", CONTINUE
        "default", DEFAULT
        "checked", CHECKED
        "unchecked", UNCHECKED
        "throw", THROW
        "rethrow", RETHROW
        "try", TRY
        "catch", CATCH
        "finally", FINALLY
        "static", STATIC
    ] |> Map.ofList
}

// These are some regular expression definitions
let digit = ['0'-'9']
let alpha = (['a' - 'z'] | ['A' - 'Z'])
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let ident = (alpha | '_')+(digit | alpha | '_')* 

rule tokenize = parse
| "//"       { comment lexbuf }
| "/*"       { comments 0 lexbuf }
| whitespace { tokenize lexbuf }
| newline    { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }

// math
| "+"   { PLUS }
| "-"   { MINUS }
| "*"   { TIMES }
| "**"  { POW }
| "/"   { DIV }

//logic
| "!"  { BANG }
| "&&" { ANDAND }
| "||" { OROR }
//| "^"  { XOR }

//compairson
| "!=" { NOTEQ }
| "==" { EQEQ }
| ">"  { GT }
| "<"  { LT }
| ">=" { GTEQ }
| "<=" { LTEQ }

//various
| "["  { LBRACKET }
| "]"  { RBRACKET }
| "{"  { LBRACE }
| "}"  { RBRACE }
| "("  { LPAREN }
| ")"  { RPAREN }
| "."  { DOT }
| ","  { COMMA }
| ";;" { DOUBLE_SEMICOLON }
| ";"  { SEMICOLON }
| "="  { EQ }
| "<-" { SET }

//verbatim string literal
| "@\"" ("\"\""|[^ '"'])* '"' { STRING (let s = lexeme lexbuf in s.Substring(2, s.Length - 3).Replace("\"\"", "\"")) }

//string literal with escape sequences
| '"' ( '\\'_ | [^ '\"' ] )* '"'
    { 
        let s = lexeme lexbuf 
        try
            STRING(System.Text.RegularExpressions.Regex.Unescape(s.Substring(1, s.Length - 2)))
        with e ->
            CM.Could_not_unescape_string_literal (range lexbuf) e.Message
            STRING("") //error recovery
    } 

//single quote char literal
| ''' "\\'" ''' { CHAR(''') }
//char literal with escape sequence (accepts zero or more chars with possible escape sequences and does error recovery)
| ''' [^ ''']* ''' 
    { 
        let s = lexeme lexbuf
        try //will throw if a) could not escape, or b) was more than one character
            let unescaped = System.Text.RegularExpressions.Regex.Unescape(s.Substring(1, s.Length - 2))
            if unescaped.Length <> 1 then
                CM.Char_literal_must_be_exactly_one_character (range lexbuf) unescaped
                CHAR(' ')
            else
                CHAR(s.[1]) 
        with e ->
            CM.Could_not_unescape_char_literal (range lexbuf) e.Message
            CHAR(' ') //error recovery
    } 

// Numeric constants
| digit+'y'
    {
        let input = lexeme lexbuf
        let input = input.Substring(0, input.Length-1)
        SBYTE(input)
    }

| digit+"uy"
    {
        let input = lexeme lexbuf
        let input = input.Substring(0, input.Length-2)
        BYTE(input)
    }

| digit+'s'
    {
        let input = lexeme lexbuf
        let input = input.Substring(0, input.Length-1)
        INT16(input)
    }

| digit+"us"
    {
        let input = lexeme lexbuf
        let input = input.Substring(0, input.Length-2)
        UINT16(input)
    }

| digit+'u'
    {
        let input = lexeme lexbuf
        let input = input.Substring(0, input.Length-1)
        UINT32(input)
    }

| digit+'L'
    {
        let input = lexeme lexbuf
        let input = input.Substring(0, input.Length-1)
        INT64(input)
    }

| digit+"UL"
    {
        let input = lexeme lexbuf
        let input = input.Substring(0, input.Length-2)
        UINT64(input)
    }

| digit+							  
    {
        let input = lexeme lexbuf
        INT32(input)
    }

| digit+'.'digit+(['e''E']digit+)?'f'
    { 
        let input = lexeme lexbuf
        let input = input.Substring(0, input.Length-1)
        SINGLE(input)
    }

| digit+'.'digit+(['e''E']digit+)? 
    { 
        let input = lexeme lexbuf
        DOUBLE(input)
    }

//verbatim identifiers
| '@'ident 
    {
        let input = (lexeme lexbuf).ToLower()
        IDENT(input.Substring(1,input.Length-1))
    }
// keywords and other identifiers
| ident 
    { 
        let input = (lexeme lexbuf).ToLower()
        match keywords |> Map.tryFind input with
        | Some(token) -> token
        | None -> IDENT(input) 
    }

// EOF
| eof { EOF }

//unrecognized input error recovery
| _ 
    { 
        let input = lexeme lexbuf
        CM.Unrecognized_input (range lexbuf) input
        tokenize lexbuf 
    }
//based on question/answer from Evgeny Gavrin http://stackoverflow.com/q/7117975/236255
and comments level = parse
| "*/"
    {
        if level = 0 then tokenize lexbuf
        else comments (level-1) lexbuf
    }
| "/*"    { comments (level+1) lexbuf }
| newline    { lexbuf.EndPos <- lexbuf.EndPos.NextLine; comments level lexbuf }
| eof { EOF }
| _       { comments level lexbuf }
and comment = parse
| newline    { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }
| eof { EOF }
| _          { comment lexbuf }
