{
module Swensen.NewLang.Lexer
open System
open Parser
open Microsoft.FSharp.Text.Lexing

let lexeme lexbuf =
    LexBuffer<char>.LexemeString lexbuf
}

// These are some regular expression definitions
let digit = ['0'-'9']
let alpha = (['a' - 'z'] | ['A' - 'Z'])
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

rule tokenize = parse
| whitespace	{ tokenize lexbuf }
| newline       { tokenize lexbuf }

// Operators
| "+"			{ PLUS }
| "-"			{ MINUS }
| "*"			{ TIMES }
| "/"			{ DIV }
| "^"			{ POW }
| "!"			{ FACT }
| "++"			{ CONCAT }

// Misc
| "("			{ LPAREN }
| ")"			{ RPAREN }

//string literal
| '"' [^ '"']* '"' { STRING (let s = lexeme lexbuf in s.Substring(1, s.Length - 2)) }

// Numeric constants
| digit+									{ INT32 (lexeme lexbuf |> int) }
| digit+('.'digit+)?(['e''E']digit+)?		{ DOUBLE (lexeme lexbuf |> float) }

//assignment
| "let" { LET }
| "=" { EQ }
| "in" { IN }
| (alpha | '_')+(digit | alpha | '_')* { ID (lexeme lexbuf |> string) }

// More misc
| "." { DOT }
| "," { COMMA }

// EOF
| eof   { EOF }