%{

open Swensen.NewLang

%}

%token <int> INT32
%token <float> DOUBLE
%token <string> STRING
%token <char> CHAR
%token PLUS MINUS TIMES DIV POW FACT CONCAT
%token <string> ID
%token IN EQ
%token LPAREN RPAREN
%token EOF
%token COMMA DOT SEMICOLON

%right SEMICOLON
%left PLUS MINUS
%left TIMES DIV
%right POW
%left CONCAT
%nonassoc UMINUS
%nonassoc FACT

%start start
%type <rexp> start
%type <rexp> rexp
%type <rexp list> rexpList

%%

start:
    | rexp EOF { $1 }

rexpList:
	| rexp { [$1] }
	| rexp COMMA rexpList { $1::$3 }
	| { [] }

longId:
	| ID { $1 }
	| ID DOT longId { $1 + "." + $3 }

rexp: 
    | rexp PLUS  rexp			 				{ rexp.NumericBinop(Plus, $1, $3)  }
    | rexp MINUS rexp			 				{ rexp.NumericBinop(Minus, $1, $3) }
	| rexp TIMES rexp			 				{ rexp.NumericBinop(Times, $1, $3) }
	| rexp DIV rexp			 					{ rexp.NumericBinop(Div, $1, $3) }
	| rexp POW rexp			 					{ rexp.Pow($1, $3) }
	| rexp CONCAT rexp		 					{ rexp.Concat($1, $3) }
	| rexp FACT				 					{ rexp.Fact($1) }
	| MINUS rexp %prec UMINUS 					{ rexp.UMinus($2) }
	| INT32					 					{ rexp.Int32($1) }
	| DOUBLE				 					{ rexp.Double($1) }
	| STRING				 					{ rexp.String($1) }
	| CHAR					 					{ rexp.Char($1) }
	| longId				 					{ rexp.Var($1.ToLower())}
	| LPAREN rexp RPAREN		 				{ $2 }
	| longId EQ rexp IN rexp   					{ rexp.Let($1.ToLower(),$3,$5) }
	| longId LPAREN rexpList RPAREN				{ rexp.IdCall($1.ToLower(),$3) }
	| rexp DOT ID LPAREN rexpList RPAREN		{ rexp.ExpCall($1,$3.ToLower(),$5) }
	| rexp SEMICOLON rexp						{ rexp.Sequential($1,$3) }