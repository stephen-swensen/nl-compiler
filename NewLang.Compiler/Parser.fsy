%{
//note, the module name of the parser is given by the --module flag (set in project)
open Swensen.NewLang.Ast

%}

%token <int> INT32
%token <float> DOUBLE
%token <string> STRING
%token PLUS MINUS TIMES DIV POW FACT CONCAT
%token <string> ID
%token IN EQ
%token LPAREN RPAREN
%token EOF
%token COMMA
%token INVOKE
%token DOT

%left PLUS MINUS
%left TIMES DIV
%right POW
%left CONCAT
%nonassoc UMINUS
%nonassoc FACT

%start start
%type <exp> start
%type <UT.exp> exp
%type <UT.exp list> expList

%%

start:
    | exp EOF				 { $1 |> tycheck Map.empty }

expList:
	| exp { [$1] }
	| exp COMMA expList { $1::$3 }
	| { [] }

longId:
	| ID { $1 }
	| ID DOT longId { $1 + "." + $3 }

exp: 
    | exp PLUS  exp			 				{ UT.NumericBinop(Plus, $1, $3)  }
    | exp MINUS exp			 				{ UT.NumericBinop(Minus, $1, $3) }
	| exp TIMES exp			 				{ UT.NumericBinop(Times, $1, $3) }
	| exp DIV exp			 				{ UT.NumericBinop(Div, $1, $3) }
	| exp POW exp			 				{ UT.Pow($1, $3) }
	| exp CONCAT exp		 				{ UT.Concat($1, $3) }
	| exp FACT				 				{ UT.Fact($1) }
	| MINUS exp %prec UMINUS 				{ UT.UMinus($2) }
	| INT32					 				{ UT.Int32($1) }
	| DOUBLE				 				{ UT.Double($1) }
	| STRING				 				{ UT.String($1) }
	| longId				 				{ UT.Var($1.ToLower())}
	| LPAREN exp RPAREN		 				{ $2 }
	| longId EQ exp IN exp   				{ UT.Let($1.ToLower(),$3,$5) }
	| longId LPAREN expList RPAREN			{ UT.IdCall($1.ToLower(),$3) }
	| exp DOT ID LPAREN expList RPAREN		{ UT.ExpCall($1,$3.ToLower(),$5) }